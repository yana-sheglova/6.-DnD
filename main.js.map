{"version":3,"file":"main.js","mappings":"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","sources":["webpack://6.-dnd/./src/js/Card.js","webpack://6.-dnd/./src/js/Form.js","webpack://6.-dnd/./src/js/Container.js","webpack://6.-dnd/./src/index.js"],"sourcesContent":["export default class Card {\n  constructor(text, columnId) {\n    this.text = text;\n    this.columnId = columnId;\n    this.cardElement = this.createCard();\n    this.bindEvents();\n  }\n\n  // Создание карточки\n  createCard() {\n    const card = document.createElement(\"div\");\n    card.classList.add(\"task\");\n    card.setAttribute(\"draggable\", true);\n    card.innerHTML = `\n            <span>${this.text}</span>\n            <button class=\"delete\">✖</button>\n        `;\n    return card;\n  }\n\n  // Привязка событий\n  bindEvents() {\n    // начало перетаскивания\n    this.cardElement.addEventListener(\"dragstart\", (event) => {\n      event.dataTransfer.setData(\"text/plain\", this.text); // Передаем данные\n      event.dataTransfer.effectAllowed = \"move\"; // Разрешаем перемещение\n      this.cardElement.classList.add(\"dragging\");\n    });\n\n    // окончание перетаскивания\n    this.cardElement.addEventListener(\"dragend\", () => {\n      this.cardElement.classList.remove(\"dragging\");\n    });\n\n    // Удаление карточки\n    this.cardElement.querySelector(\".delete\").addEventListener(\"click\", () => {\n      this.removeCard();\n    });\n  }\n\n  // Удаление карточки\n  removeCard() {\n    this.cardElement.remove();\n    this.removeFromLocalStorage(this.text);\n  }\n\n  // Удаление карточки из localStorage\n  removeFromLocalStorage(text) {\n    const cards = JSON.parse(localStorage.getItem(\"cards\")) || [];\n    const updatedCards = cards.filter((card) => card.text !== text);\n    localStorage.setItem(\"cards\", JSON.stringify(updatedCards));\n  }\n}\n","import Card from \"./Card\";\n\nexport default class Form {\n  constructor(column) {\n    this.column = column;\n    this.columnId = this.column.dataset.columnId;\n    this.formElement = this.createForm();\n    this.column.appendChild(this.formElement);\n    this.bindEvents();\n  }\n\n  createForm() {\n    const form = document.createElement(\"div\");\n    form.classList.add(\"form\");\n    form.innerHTML = `\n            <textarea class=\"task-text\" rows=\"3\" placeholder=\"Enter task text\"></textarea>\n            <div class=\"button-container\">\n                <button class=\"add\">Add</button>\n                <button class=\"close\">✖</button>\n            </div>\n        `;\n    setTimeout(() => form.querySelector(\".task-text\").focus(), 0);\n\n    return form;\n  }\n\n  // Привязка событий\n  bindEvents() {\n    this.formElement.querySelector(\".add\").addEventListener(\"click\", () => {\n      const text = this.formElement.querySelector(\".task-text\").value;\n\n      if (text) {\n        const card = new Card(text);\n\n        const addTaskBtn = this.column.querySelector(\".add-task\");\n        this.column.insertBefore(card.cardElement, addTaskBtn);\n\n        this.saveToLocalStorage(text, this.columnId);\n\n        this.formElement.querySelector(\".task-text\").value = \"\";\n\n        this.column.removeChild(this.formElement);\n        addTaskBtn.style.display = \"block\";\n      }\n    });\n\n    this.formElement.querySelector(\".close\").addEventListener(\"click\", () => {\n      this.column.removeChild(this.formElement);\n      this.column.querySelector(\".add-task\").style.display = \"block\";\n    });\n  }\n\n  saveToLocalStorage(text, columnId) {\n    const cards = JSON.parse(localStorage.getItem(\"cards\")) || [];\n    cards.push({ text, columnId });\n    localStorage.setItem(\"cards\", JSON.stringify(cards));\n  }\n}\n","import Card from \"./Card\";\nimport Form from \"./Form\";\n\nexport default class Container {\n  constructor() {\n    this.columns = document.querySelectorAll(\".column\");\n    this.init();\n  }\n\n  // Инициализация\n  init() {\n    this.columns.forEach((column) => {\n      // Разрешаем перетаскивание над колонкой\n      column.addEventListener(\"dragover\", (event) => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"move\"; //эффект перемещения\n\n        const cardDragged = document.querySelector(\".dragging\");\n        const afterElement = this.getDragAfterElement(column, event.clientY);\n\n        // Если afterElement равен null, вставляем карточку перед кнопкой \"Add task\"\n        if (afterElement == null) {\n          const addTaskBtn = column.querySelector(\".add-task\");\n          column.insertBefore(cardDragged, addTaskBtn);\n        } else {\n          // Вставляем карточку перед afterElement\n          column.insertBefore(cardDragged, afterElement);\n        }\n      });\n\n      // событие броска карточки в колонку\n      column.addEventListener(\"drop\", (event) => {\n        event.preventDefault();\n        const text = event.dataTransfer.getData(\"text/plain\");\n\n        // Находим оригинальную карточку и удаляем её\n        const originalCard = Array.from(this.columns)\n          .flatMap((column) => Array.from(column.querySelectorAll(\".task\")))\n          .find((card) => card.querySelector(\"span\").textContent === text);\n\n        if (originalCard) {\n          originalCard.remove();\n        }\n\n        // Создаем новую карточку и вставляем ее перед кнопкой\n        const card = new Card(text, column.dataset.columnId);\n        column.insertBefore(\n          card.cardElement,\n          column.querySelector(\".add-task\"),\n        );\n\n        this.saveCardPosition(card);\n      });\n\n      // Кнопка \"Add task\"\n      const addBtn = column.querySelector(\".add-task\");\n      addBtn.addEventListener(\"click\", () => {\n        addBtn.style.display = \"none\";\n        new Form(column);\n      });\n\n      // Загрузка карточек из localStorage\n      this.loadCards(column);\n    });\n  }\n\n  // Загрузка карточек из localStorage\n  loadCards(column) {\n    const columnId = column.dataset.columnId;\n    const cards = JSON.parse(localStorage.getItem(\"cards\")) || [];\n    cards\n      .filter((card) => card.columnId === columnId)\n      .forEach((cardData) => {\n        const card = new Card(cardData.text, cardData.columnId);\n        column.insertBefore(\n          card.cardElement,\n          column.querySelector(\".add-task\"),\n        );\n      });\n  }\n\n  // Сохранение позиции карточки в localStorage\n  saveCardPosition(card) {\n    const cards = JSON.parse(localStorage.getItem(\"cards\")) || [];\n    const cardIndex = cards.findIndex((c) => c.text === card.text);\n\n    if (cardIndex !== -1) {\n      cards[cardIndex].columnId = card.columnId; // Обновляем колонку\n    } else {\n      cards.push({ text: card.text, columnId: card.columnId }); // Добавляем новую карточку\n    }\n\n    localStorage.setItem(\"cards\", JSON.stringify(cards));\n  }\n\n  // Определение позиции для вставки карточки\n  getDragAfterElement(column, y) {\n    const draggableElements = [\n      ...column.querySelectorAll(\".task:not(.dragging)\"),\n    ];\n\n    draggableElements.reduce((closest, child) => {\n      const box = child.getBoundingClientRect();\n      const offset = y - box.top - box.height / 2;\n\n      if (offset < 0 && (closest === null || offset > closest.offset)) {\n        return { offset: offset, element: child };\n      } else {\n        return closest;\n      }\n    }, null);\n  }\n}\n","import Container from \"./js/Container\";\nimport \"./css/style.css\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Container();\n});\n"],"names":["Card","constructor","text","columnId","this","cardElement","createCard","bindEvents","card","document","createElement","classList","add","setAttribute","innerHTML","addEventListener","event","dataTransfer","setData","effectAllowed","remove","querySelector","removeCard","removeFromLocalStorage","updatedCards","JSON","parse","localStorage","getItem","filter","setItem","stringify","Form","column","dataset","formElement","createForm","appendChild","form","setTimeout","focus","value","addTaskBtn","insertBefore","saveToLocalStorage","removeChild","style","display","cards","push","Container","columns","querySelectorAll","init","forEach","preventDefault","dropEffect","cardDragged","afterElement","getDragAfterElement","clientY","getData","originalCard","Array","from","flatMap","find","textContent","saveCardPosition","addBtn","loadCards","cardData","cardIndex","findIndex","c","y","reduce","closest","child","box","getBoundingClientRect","offset","top","height","element"],"sourceRoot":""}